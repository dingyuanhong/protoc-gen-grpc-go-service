// Code initially generated by protoc-gen-grpc-goservice
// source: example.proto

package main

import (
	"io"

	"github.com/nstogner/protoc-gen-grpc-goservice/example"
	"golang.org/x/net/context"
)

type service struct{}

// Echo sends a single output for a single input.
func (s *service) Echo(ctx context.Context, input *example.InputMessage) (*example.OutputMessage, error) {
	// TODO: Do something with the input
	_ = input

	// TODO: Send some meaningful output
	return &example.OutputMessage{}, nil
}

// EchoStreamOut streams output for a single input.
func (s *service) EchoStreamOut(input *example.InputMessage, stream example.ExampleService_EchoStreamOutServer) error {
	// TODO: Do something with the input
	_ = input

	// TODO: Stream some meaningful output
	for i := 0; i < 10; i++ {
		if err := stream.Send(&example.OutputMessage{}); err != nil {
			return err
		}
	}

	return nil
}

// EchoStreamIn sends a single output for a streamed input.
func (s *service) EchoStreamIn(stream example.ExampleService_EchoStreamInServer) error {
	for {
		input, err := stream.Recv()
		if err == io.EOF {
			// TODO: Send some meaningful output
			return stream.SendAndClose(&example.OutputMessage{})
		}
		if err != nil {
			return err
		}

		// TODO: Do something with the input message
		_ = input
	}

	return nil
}

// EchoStreamInOut streams outputs and listens to a stream of inputs.
func (s *service) EchoStreamInOut(stream example.ExampleService_EchoStreamInOutServer) error {
	for {
		input, err := stream.Recv()
		if err == io.EOF {
			return nil
		}
		if err != nil {
			return err
		}

		// TODO: Do something with input
		_ = input

		// TODO: Stream some meaningful output
		if err := stream.Send(&example.OutputMessage{}); err != nil {
			return err
		}
	}

	return nil
}
